let mongoose,express;_c79‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_c79‍.w("express",[["default",["express"],function(v){express=v}]]);


const app = express();

const port = 3000

let cars = [];

mongoose.connect('mongodb://localhost:27017/CarDatabase', {
    "useNewUrlParser": true,
    "useUnifiedTopology": true
});

const db = mongoose.connection;
db.on('error', _c79‍.g.console.error.bind(_c79‍.g.console, 'connection error:'));
db.once('open', () => {
  console.log('Database connected')
});

const carSchema = new mongoose.Schema({
    make: String,
    model: String,
    year: Number,
    fuel: String,
    
});

const car = mongoose.model('car', carSchema);

app.get('/addCar/:make', (req, res) => {
    
    const aCar = new car({make: req.params.make});

    aCar.save()
    .then((result) => res.send(`${req.params.make} was saved to the database`))
    .catch((err) =>
    _c79‍.g.console.err(err));

});

app.get('/addmodel/:model', (req, res) => {
    
    const amodel = new car({model: req.params.model});

    amodel.save()
    .then((result) => res.send(`${req.params.model} was saved to the database`))
    .catch((err) =>
    _c79‍.g.console.err(err));

});


app.get('/deleteCar/:make', (req, res) => {
    var type = req.params.make;

    cars.remove({
        make: type
    }, function(err){
        if(err){
            _c79‍.g.console.log(err)
        }
        else{
            res.send("Removed from the database");
        }
    });
})


app.listen(port, () => console.log(`Example app listening on 
  : ${port}!`))




